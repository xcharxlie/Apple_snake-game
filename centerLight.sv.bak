module centerLight (Clock, Reset, L, R, NL, NR, lightOn);
	input logic Clock, Reset;
	input logic L, R, NL, NR;
	output logic lightOn;
	
	enum {A, B} ps, ns;
	//next stage logic
	
	always_comb begin
		case(ps)
			A: if(~L&&~R&&~NL&&~NR) ns = A;
				else ns = B;
			B: if(L&&~R&&~NL&&NR || ~L&&R&&NL&&~NR) ns = B;
				else ns = B;

		endcase
	end
	
	assign lightOn = (~L&&~R&&~NL&&~NR)||(L&&~R&&~NL&&NR)||(ns==A);
			
	always_ff@(posedge Clock) begin
		if(Reset)
			ps <= A;
		else
			ps <= ns;
	end
endmodule

module centerLight_testbench();
	logic Clock, Reset;
	logic L, R, NL, NR;
	logic lightOn;
	centerLight dut (Clock, Reset, L, R, NL, NR, lightOn);
	 
	 // Set up the clock.
	 parameter CLOCK_PERIOD=100;
	 initial begin
		 Clock <= 0;
		 forever #(CLOCK_PERIOD/2) Clock <= ~Clock;
	 end
	 
	 // Set up the inputs to the design. Each line is a clock cycle.
	 initial begin
		 @(posedge Clock);
		 Reset <= 1; @(posedge Clock);
		 Reset <= 0; L <= 0; R <= 0; NL <= 0; NR <= 0;@(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 

						 L <= 1; R <= 0; NL <= 0; NR <= 1; @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
						L <= 0; R <= 1; NL <= 1; NR <= 0; @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 		 Reset <= 0; L <= 0; R <= 0; NL <= 0; NR <= 0;@(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 $stop; // End the simulation.
	 end
endmodule

module normalLight (Clock, Reset, L, R, NL, NR, lightOn);
	input logic Clock, Reset;
	input logic L, R, NL, NR;
	output logic lightOn;
	
	enum {A, B} ps, ns;
	//next stage logic
	
	always_comb begin
		case(ps)
			A: if(L&&~R&&~NL&&NR) ns = A;
				else ns = B;
			B: if(~L&&R&&NL&&~NR) ns = A;
				else ns = A;
		endcase
	end
	
	assign lightOn = (L&&~R&&~NL&&NR)||(~L&&R&&NL&&~NR);
			
	always_ff@(posedge Clock) begin
		if(Reset)
			ps <= A;
		else
			ps <= ns;
	end
endmodule

module normalLight_testbench();
	logic Clock, Reset;
	logic L, R, NL, NR;
	logic lightOn;
	normalLight dut (Clock, Reset, L, R, NL, NR, lightOn);
	 
	 // Set up the clock.
	 parameter CLOCK_PERIOD=100;
	 initial begin
		 Clock <= 0;
		 forever #(CLOCK_PERIOD/2) Clock <= ~Clock;
	 end
	 
	 // Set up the inputs to the design. Each line is a clock cycle.
	 initial begin
		 @(posedge Clock);
		 Reset <= 1; @(posedge Clock);
		 Reset <= 0; L <= 0; R <= 0; NL <= 0; NR <= 0;@(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 

						 L <= 1; R <= 0; NL <= 0; NR <= 1; @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
						L <= 0; R <= 1; NL <= 1; NR <= 0; @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 @(posedge Clock);
		 $stop; // End the simulation.
	 end
endmodule


